# TODO: Pop this out into a module that can be installed, incorporating the other params like location for solar capacity factor from household-model


from constants import SOLAR_AVG_DEGRADED_PERFORMANCE_30_YRS


def calculate_upfront_cost(solar_size: float, solar_price: int) -> float:
    return round(solar_price * solar_size)


# def _get_total_opex(
#     household: Household, period: PeriodEnum, location: LocationEnum
# ) -> float:

#     electricity_consumption = get_electricity_consumption(
#         energy_needs, household.solar, household.battery, household.location, period
#     )
#     other_energy_consumption = get_other_energy_consumption(energy_needs)
#     if period == PeriodEnum.YEARLY:
#         print("\n\nEnergy consumption")
#         print(
#             "\nelectricity_consumption: ", json.dumps(electricity_consumption, indent=4)
#         )
#         print(
#             "\nother_energy_consumption: ",
#             json.dumps(other_energy_consumption, indent=4),
#         )
#         print("\n\n")
#     total_bills = get_total_bills(
#         household, electricity_consumption, other_energy_consumption, period
#     )
#     return total_bills


def get_e_generated_from_solar(
    solar_size: float, solar_capacity_factor: float
) -> float:
    return (
        solar_size
        * solar_capacity_factor
        * SOLAR_AVG_DEGRADED_PERFORMANCE_30_YRS
        * 24
        * 365.25
    )


# def _get_max_e_consumed_from_solar(e_needs: MachineEnergyNeeds) -> MachineEnergyNeeds:
#     return {
#         cat: {
#             FuelTypeEnum.ELECTRICITY: e_needs[cat].get(FuelTypeEnum.ELECTRICITY, 0)
#             * MACHINE_CATEGORY_TO_SELF_CONSUMPTION_RATE[cat]
#         }
#         for cat in MACHINE_CATEGORIES
#         if cat in e_needs
#     }


# def get_electricity_consumption(
#     energy_needs: MachineEnergyNeeds,
#     solar: Solar,
#     battery: Battery,
#     location: LocationEnum,
#     period: PeriodEnum = PeriodEnum.DAILY,
# ) -> ElectricityConsumption:

#     # Energy generated by solar
#     total_e_generated_from_solar = get_e_generated_from_solar(solar, location, period)
#     print(f"total_e_generated_from_solar: {total_e_generated_from_solar}")

#     # Consumed from solar
#     e_consumed_from_solar, e_generated_remaining, e_needs_remaining = (
#         get_e_consumed_from_solar(total_e_generated_from_solar, energy_needs)
#     )

#     total_e_consumed_from_solar = sum_energy_for_fuel_type(
#         e_consumed_from_solar, FuelTypeEnum.ELECTRICITY
#     )
#     print(f"total_e_consumed_from_solar: {total_e_consumed_from_solar}")

#     # Consumed by battery
#     # We assume all machine types have the same self-consumption rates from the battery, so we can ignore how much of each machine category's needs are met by the battery storage. In future, we may wish to be more sophisticated about how certain machines pull more from the battery due to usage patterns.
#     # We assume that all the electricity stored in the battery is from solar. We don't yet allow for batteries (and therefore arbitrage) without solar.
#     total_e_stored_in_battery = 0
#     if battery.has_battery and battery.capacity is not None:
#         # electricity stored in battery, then consumed or exported
#         total_e_stored_in_battery = get_e_stored_in_battery(
#             battery.capacity,
#             total_e_generated_from_solar,
#             total_e_consumed_from_solar,
#             period,
#         )
#     print(f"total_e_stored_in_battery: {total_e_stored_in_battery}")

#     # Exported to grid
#     total_e_exported = (
#         total_e_generated_from_solar
#         - total_e_stored_in_battery
#         - total_e_consumed_from_solar
#     )
#     print(f"total_e_exported: {total_e_exported}")

#     # Remaining energy needs met by the grid
#     total_e_needs_remaining = sum_energy_for_fuel_type(
#         e_needs_remaining, FuelTypeEnum.ELECTRICITY
#     )
#     total_e_consumed_from_grid = total_e_needs_remaining - total_e_stored_in_battery
#     if total_e_consumed_from_grid < 0:
#         total_e_consumed_from_grid = 0
#     print(f"total_e_consumed_from_grid: {total_e_consumed_from_grid}")

#     electricity_consumption: ElectricityConsumption = {
#         "consumed_from_solar": total_e_consumed_from_solar,
#         "consumed_from_battery": total_e_stored_in_battery,
#         "consumed_from_grid": total_e_consumed_from_grid,
#         "exported_to_grid": total_e_exported,
#     }
#     return electricity_consumption
